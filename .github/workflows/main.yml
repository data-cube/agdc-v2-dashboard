name: Lint, Test Code and Push Docker image for DEVELOP or TAG

on:
  pull_request:
    paths:
      - '**'

  push:
    paths:
      - '**'

  release:
    types:
      - created

env:
  IMAGE_NAME: opendatacube/dashboard

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build Docker
      run: |
        make build
        docker-compose up -d

    - name: Run linting
      run: |
        make lint-docker

    - name: Run tests
      run: |
        make create-test-db-docker
        make test-docker

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CodeCovToken }}
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Notify Slack for Failures
      uses: rtCamp/action-slack-notify@v2.0.0
      if: failure()
      env:
        SLACK_CHANNEL: explorer-alerts
        SLACK_ICON_EMOJI: ':fire:'
        SLACK_MESSAGE: 'Linting or tests failed...'
        SLACK_TITLE: GitHub Action failed
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  push:
    runs-on: ubuntu-latest
    needs: main
    if: github.ref == 'refs/heads/develop' || contains(github.ref, 'cubedash-')

    steps:
    - name: Checkout git
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # ToDO: run claire_db test thingy here

    - name: Build and Push latest Docker image
      uses: whoan/docker-build-with-cache-action@v4
      with:
        image_name: ${{ env.IMAGE_NAME }}
        username: gadockersvc
        password: "${{ secrets.DockerPassword }}"
        build_extra_args: "--build-arg=ENVIRONMENT=deployment"

    - name: Get tag for this build if it exists
      if: contains(github.ref, 'cubedash-')
      run: >
        echo ::set-env name=RELEASE::$(docker run --rm -e DATACUBE_DB_URL=postgresql://username:password@hostname:5432/database
        ${{ env.IMAGE_NAME }}:latest python3 -c 'import cubedash; print(cubedash.__version__)')

    - name: Log the tag
      run: echo $RELEASE

    - name: Build and Push release if we have a tag
      uses: whoan/docker-build-with-cache-action@v4
      if: contains(github.ref, 'cubedash-')
      with:
        image_name: ${{ env.IMAGE_NAME }}
        image_tag: ${{ env.RELEASE }}
        username: gadockersvc
        password: "${{ secrets.DockerPassword }}"
        build_extra_args: "--build-arg=ENVIRONMENT=deployment"

    - name: Notify Slack for Failures
      uses: rtCamp/action-slack-notify@v2.0.0
      if: failure()
      env:
        SLACK_CHANNEL: explorer-alerts
        SLACK_ICON_EMOJI: ':fire:'
        SLACK_MESSAGE: 'Building Docker images failed...'
        SLACK_TITLE: GitHub Action failed
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
