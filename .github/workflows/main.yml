name: Lint, Test Code and Push Docker image for DEVELOP or TAG

on:
  pull_request:
    paths:
      - '**'

  push:
    paths:
      - '**'

env:
  IMAGE_NAME: opendatacube/explorer

jobs:
  main:
    runs-on: ubuntu-latest

    container:
      image: ubuntu:bionic

    services:
      postgres:
        image: kartoza/postgis:11.0-2.5
        env:
          POSTGRES_USER: opendatacube
          POSTGRES_PASSWORD: opendatacubepassword
          POSTGRES_DB: opendatacube
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0

    - name: Build Docker
      run: |
        docker build --tag ${IMAGE_NAME}:local .

    - name: Run linting
      run: |
        docker run --rm  \
          -v $(pwd):/code/ \
          - e DB_HOSTNAME=postgres \
          - e DB_USERNAME=opendatacube \
          - e DB_PASSWORD=opendatacubepassword \
          - e DB_DATABASE=opendatacube_test \
          - e DB_PORT= ${{ job.services.postgres.ports[5432] }} \
          - e FLASK_ENV=development \
          - e FLASK_APP=cubedash \
          ${IMAGE_NAME}:local \
          make lint

    - name: Run tests
      run: |
        docker run --rm  \
          -v $(pwd):/code/ \
          - ./.docker/.datacube_integration.conf:/root/.datacube_integration.conf
          - e DB_HOSTNAME=postgres \
          - e DB_USERNAME=opendatacube \
          - e DB_PASSWORD=opendatacubepassword \
          - e DB_DATABASE=opendatacube \
          - e DB_PORT= ${{ job.services.postgres.ports[5432] }} \
          - e FLASK_ENV=development \
          - e FLASK_APP=cubedash \
          ${IMAGE_NAME}:local \
          make lint

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CodeCovToken }}
        file: ./coverage.xml
        fail_ci_if_error: false

  push:
    runs-on: ubuntu-latest
    needs: main
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v1

    - name: Get the version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

    - name: test version
      run: echo $VERSION

    - name: Pull docker cache
      run: |
        docker pull ${IMAGE_NAME}:latest         || true

    - name: Build Test Runner Docker
      run: |
        # build and cache first stage (env_builder)
        docker build \
          --target env_builder \
          --cache-from ${IMAGE_NAME}:latest \
          --tag        ${IMAGE_NAME}:build \
          .

    - name: Verify Docker Image
      run: |
        ./check-code.sh --with-docker integration_tests

    - name: Test Security with clair_db
      run: echo "todo"

    - name: DockerHub Push
      if: |
        github.event_name == 'push' && (
          github.ref == 'refs/heads/develop'
          )
      run: |
        echo "Login to DockerHub as ${DOCKER_USER}"
        echo "${{ secrets.DockerPassword }}" | docker login -u "${DOCKER_USER}" --password-stdin
        docker push ${IMAGE_NAME}:${BUILDER_TAG}
        docker push ${IMAGE_NAME}:latest